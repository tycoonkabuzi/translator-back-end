"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  Brevity: () => Brevity,
  ConcurrentModificationException: () => ConcurrentModificationException,
  ConflictException: () => ConflictException,
  CreateParallelDataCommand: () => CreateParallelDataCommand,
  DeleteParallelDataCommand: () => DeleteParallelDataCommand,
  DeleteTerminologyCommand: () => DeleteTerminologyCommand,
  DescribeTextTranslationJobCommand: () => DescribeTextTranslationJobCommand,
  DetectedLanguageLowConfidenceException: () => DetectedLanguageLowConfidenceException,
  Directionality: () => Directionality,
  DisplayLanguageCode: () => DisplayLanguageCode,
  DocumentFilterSensitiveLog: () => DocumentFilterSensitiveLog,
  EncryptionKeyType: () => EncryptionKeyType,
  Formality: () => Formality,
  GetParallelDataCommand: () => GetParallelDataCommand,
  GetTerminologyCommand: () => GetTerminologyCommand,
  ImportTerminologyCommand: () => ImportTerminologyCommand,
  ImportTerminologyRequestFilterSensitiveLog: () => ImportTerminologyRequestFilterSensitiveLog,
  InternalServerException: () => InternalServerException,
  InvalidFilterException: () => InvalidFilterException,
  InvalidParameterValueException: () => InvalidParameterValueException,
  InvalidRequestException: () => InvalidRequestException,
  JobStatus: () => JobStatus,
  LimitExceededException: () => LimitExceededException,
  ListLanguagesCommand: () => ListLanguagesCommand,
  ListParallelDataCommand: () => ListParallelDataCommand,
  ListTagsForResourceCommand: () => ListTagsForResourceCommand,
  ListTerminologiesCommand: () => ListTerminologiesCommand,
  ListTextTranslationJobsCommand: () => ListTextTranslationJobsCommand,
  MergeStrategy: () => MergeStrategy,
  ParallelDataFormat: () => ParallelDataFormat,
  ParallelDataStatus: () => ParallelDataStatus,
  Profanity: () => Profanity,
  ResourceNotFoundException: () => ResourceNotFoundException,
  ServiceUnavailableException: () => ServiceUnavailableException,
  StartTextTranslationJobCommand: () => StartTextTranslationJobCommand,
  StopTextTranslationJobCommand: () => StopTextTranslationJobCommand,
  TagResourceCommand: () => TagResourceCommand,
  TerminologyDataFilterSensitiveLog: () => TerminologyDataFilterSensitiveLog,
  TerminologyDataFormat: () => TerminologyDataFormat,
  TextSizeLimitExceededException: () => TextSizeLimitExceededException,
  TooManyRequestsException: () => TooManyRequestsException,
  TooManyTagsException: () => TooManyTagsException,
  Translate: () => Translate,
  TranslateClient: () => TranslateClient,
  TranslateDocumentCommand: () => TranslateDocumentCommand,
  TranslateDocumentRequestFilterSensitiveLog: () => TranslateDocumentRequestFilterSensitiveLog,
  TranslateDocumentResponseFilterSensitiveLog: () => TranslateDocumentResponseFilterSensitiveLog,
  TranslateServiceException: () => TranslateServiceException,
  TranslateTextCommand: () => TranslateTextCommand,
  TranslatedDocumentFilterSensitiveLog: () => TranslatedDocumentFilterSensitiveLog,
  UnsupportedDisplayLanguageCodeException: () => UnsupportedDisplayLanguageCodeException,
  UnsupportedLanguagePairException: () => UnsupportedLanguagePairException,
  UntagResourceCommand: () => UntagResourceCommand,
  UpdateParallelDataCommand: () => UpdateParallelDataCommand,
  __Client: () => import_smithy_client.Client,
  paginateListLanguages: () => paginateListLanguages,
  paginateListParallelData: () => paginateListParallelData,
  paginateListTerminologies: () => paginateListTerminologies,
  paginateListTextTranslationJobs: () => paginateListTextTranslationJobs
});
module.exports = __toCommonJS(index_exports);

// src/TranslateClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return Object.assign(options, {
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "translate"
  });
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/TranslateClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = Object.assign(
    (0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig),
    (0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig),
    (0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig),
    getHttpAuthExtensionConfiguration(runtimeConfig)
  );
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return Object.assign(
    runtimeConfig,
    (0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    (0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    (0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    resolveHttpAuthRuntimeConfig(extensionConfiguration)
  );
}, "resolveRuntimeExtensions");

// src/TranslateClient.ts
var TranslateClient = class extends import_smithy_client.Client {
  static {
    __name(this, "TranslateClient");
  }
  /**
   * The resolved configuration of TranslateClient class. This is resolved and normalized from the {@link TranslateClientConfig | constructor configuration interface}.
   */
  config;
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    super(_config_0);
    this.initConfig = _config_0;
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
    const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
    const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
    const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
    this.config = _config_8;
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider.defaultTranslateHttpAuthSchemeParametersProvider,
        identityProviderConfigProvider: /* @__PURE__ */ __name(async (config) => new import_core.DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials
        }), "identityProviderConfigProvider")
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
};

// src/Translate.ts


// src/commands/CreateParallelDataCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");


// src/protocols/Aws_json1_1.ts
var import_core2 = require("@aws-sdk/core");


var import_uuid = require("uuid");

// src/models/models_0.ts


// src/models/TranslateServiceException.ts

var TranslateServiceException = class _TranslateServiceException extends import_smithy_client.ServiceException {
  static {
    __name(this, "TranslateServiceException");
  }
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _TranslateServiceException.prototype);
  }
};

// src/models/models_0.ts
var ConcurrentModificationException = class _ConcurrentModificationException extends TranslateServiceException {
  static {
    __name(this, "ConcurrentModificationException");
  }
  name = "ConcurrentModificationException";
  $fault = "client";
  Message;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ConcurrentModificationException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ConcurrentModificationException.prototype);
    this.Message = opts.Message;
  }
};
var ConflictException = class _ConflictException extends TranslateServiceException {
  static {
    __name(this, "ConflictException");
  }
  name = "ConflictException";
  $fault = "client";
  Message;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ConflictException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ConflictException.prototype);
    this.Message = opts.Message;
  }
};
var EncryptionKeyType = {
  KMS: "KMS"
};
var ParallelDataFormat = {
  CSV: "CSV",
  TMX: "TMX",
  TSV: "TSV"
};
var ParallelDataStatus = {
  ACTIVE: "ACTIVE",
  CREATING: "CREATING",
  DELETING: "DELETING",
  FAILED: "FAILED",
  UPDATING: "UPDATING"
};
var InternalServerException = class _InternalServerException extends TranslateServiceException {
  static {
    __name(this, "InternalServerException");
  }
  name = "InternalServerException";
  $fault = "server";
  Message;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InternalServerException",
      $fault: "server",
      ...opts
    });
    Object.setPrototypeOf(this, _InternalServerException.prototype);
    this.Message = opts.Message;
  }
};
var InvalidParameterValueException = class _InvalidParameterValueException extends TranslateServiceException {
  static {
    __name(this, "InvalidParameterValueException");
  }
  name = "InvalidParameterValueException";
  $fault = "client";
  Message;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidParameterValueException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidParameterValueException.prototype);
    this.Message = opts.Message;
  }
};
var InvalidRequestException = class _InvalidRequestException extends TranslateServiceException {
  static {
    __name(this, "InvalidRequestException");
  }
  name = "InvalidRequestException";
  $fault = "client";
  Message;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidRequestException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidRequestException.prototype);
    this.Message = opts.Message;
  }
};
var LimitExceededException = class _LimitExceededException extends TranslateServiceException {
  static {
    __name(this, "LimitExceededException");
  }
  name = "LimitExceededException";
  $fault = "client";
  Message;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "LimitExceededException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _LimitExceededException.prototype);
    this.Message = opts.Message;
  }
};
var TooManyRequestsException = class _TooManyRequestsException extends TranslateServiceException {
  static {
    __name(this, "TooManyRequestsException");
  }
  name = "TooManyRequestsException";
  $fault = "client";
  Message;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TooManyRequestsException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _TooManyRequestsException.prototype);
    this.Message = opts.Message;
  }
};
var TooManyTagsException = class _TooManyTagsException extends TranslateServiceException {
  static {
    __name(this, "TooManyTagsException");
  }
  name = "TooManyTagsException";
  $fault = "client";
  ResourceArn;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TooManyTagsException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _TooManyTagsException.prototype);
    this.ResourceArn = opts.ResourceArn;
  }
};
var ResourceNotFoundException = class _ResourceNotFoundException extends TranslateServiceException {
  static {
    __name(this, "ResourceNotFoundException");
  }
  name = "ResourceNotFoundException";
  $fault = "client";
  Message;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ResourceNotFoundException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
    this.Message = opts.Message;
  }
};
var JobStatus = {
  COMPLETED: "COMPLETED",
  COMPLETED_WITH_ERROR: "COMPLETED_WITH_ERROR",
  FAILED: "FAILED",
  IN_PROGRESS: "IN_PROGRESS",
  STOPPED: "STOPPED",
  STOP_REQUESTED: "STOP_REQUESTED",
  SUBMITTED: "SUBMITTED"
};
var Brevity = {
  ON: "ON"
};
var Formality = {
  FORMAL: "FORMAL",
  INFORMAL: "INFORMAL"
};
var Profanity = {
  MASK: "MASK"
};
var TerminologyDataFormat = {
  CSV: "CSV",
  TMX: "TMX",
  TSV: "TSV"
};
var Directionality = {
  MULTI: "MULTI",
  UNI: "UNI"
};
var MergeStrategy = {
  OVERWRITE: "OVERWRITE"
};
var DisplayLanguageCode = {
  DE: "de",
  EN: "en",
  ES: "es",
  FR: "fr",
  IT: "it",
  JA: "ja",
  KO: "ko",
  PT: "pt",
  ZH: "zh",
  ZH_TW: "zh-TW"
};
var UnsupportedDisplayLanguageCodeException = class _UnsupportedDisplayLanguageCodeException extends TranslateServiceException {
  static {
    __name(this, "UnsupportedDisplayLanguageCodeException");
  }
  name = "UnsupportedDisplayLanguageCodeException";
  $fault = "client";
  Message;
  /**
   * <p>Language code passed in with the request.</p>
   * @public
   */
  DisplayLanguageCode;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "UnsupportedDisplayLanguageCodeException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _UnsupportedDisplayLanguageCodeException.prototype);
    this.Message = opts.Message;
    this.DisplayLanguageCode = opts.DisplayLanguageCode;
  }
};
var InvalidFilterException = class _InvalidFilterException extends TranslateServiceException {
  static {
    __name(this, "InvalidFilterException");
  }
  name = "InvalidFilterException";
  $fault = "client";
  Message;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidFilterException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidFilterException.prototype);
    this.Message = opts.Message;
  }
};
var UnsupportedLanguagePairException = class _UnsupportedLanguagePairException extends TranslateServiceException {
  static {
    __name(this, "UnsupportedLanguagePairException");
  }
  name = "UnsupportedLanguagePairException";
  $fault = "client";
  Message;
  /**
   * <p>The language code for the language of the input text. </p>
   * @public
   */
  SourceLanguageCode;
  /**
   * <p>The language code for the language of the translated text. </p>
   * @public
   */
  TargetLanguageCode;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "UnsupportedLanguagePairException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _UnsupportedLanguagePairException.prototype);
    this.Message = opts.Message;
    this.SourceLanguageCode = opts.SourceLanguageCode;
    this.TargetLanguageCode = opts.TargetLanguageCode;
  }
};
var ServiceUnavailableException = class _ServiceUnavailableException extends TranslateServiceException {
  static {
    __name(this, "ServiceUnavailableException");
  }
  name = "ServiceUnavailableException";
  $fault = "server";
  Message;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ServiceUnavailableException",
      $fault: "server",
      ...opts
    });
    Object.setPrototypeOf(this, _ServiceUnavailableException.prototype);
    this.Message = opts.Message;
  }
};
var DetectedLanguageLowConfidenceException = class _DetectedLanguageLowConfidenceException extends TranslateServiceException {
  static {
    __name(this, "DetectedLanguageLowConfidenceException");
  }
  name = "DetectedLanguageLowConfidenceException";
  $fault = "client";
  Message;
  /**
   * <p>The language code of the auto-detected language from Amazon Comprehend.</p>
   * @public
   */
  DetectedLanguageCode;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DetectedLanguageLowConfidenceException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _DetectedLanguageLowConfidenceException.prototype);
    this.Message = opts.Message;
    this.DetectedLanguageCode = opts.DetectedLanguageCode;
  }
};
var TextSizeLimitExceededException = class _TextSizeLimitExceededException extends TranslateServiceException {
  static {
    __name(this, "TextSizeLimitExceededException");
  }
  name = "TextSizeLimitExceededException";
  $fault = "client";
  Message;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TextSizeLimitExceededException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _TextSizeLimitExceededException.prototype);
    this.Message = opts.Message;
  }
};
var TerminologyDataFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.File && { File: import_smithy_client.SENSITIVE_STRING }
}), "TerminologyDataFilterSensitiveLog");
var ImportTerminologyRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.TerminologyData && { TerminologyData: TerminologyDataFilterSensitiveLog(obj.TerminologyData) }
}), "ImportTerminologyRequestFilterSensitiveLog");
var DocumentFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Content && { Content: import_smithy_client.SENSITIVE_STRING }
}), "DocumentFilterSensitiveLog");
var TranslateDocumentRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Document && { Document: DocumentFilterSensitiveLog(obj.Document) }
}), "TranslateDocumentRequestFilterSensitiveLog");
var TranslatedDocumentFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Content && { Content: import_smithy_client.SENSITIVE_STRING }
}), "TranslatedDocumentFilterSensitiveLog");
var TranslateDocumentResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.TranslatedDocument && { TranslatedDocument: TranslatedDocumentFilterSensitiveLog(obj.TranslatedDocument) }
}), "TranslateDocumentResponseFilterSensitiveLog");

// src/protocols/Aws_json1_1.ts
var se_CreateParallelDataCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("CreateParallelData");
  let body;
  body = JSON.stringify(se_CreateParallelDataRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CreateParallelDataCommand");
var se_DeleteParallelDataCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("DeleteParallelData");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteParallelDataCommand");
var se_DeleteTerminologyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("DeleteTerminology");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteTerminologyCommand");
var se_DescribeTextTranslationJobCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("DescribeTextTranslationJob");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeTextTranslationJobCommand");
var se_GetParallelDataCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("GetParallelData");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_GetParallelDataCommand");
var se_GetTerminologyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("GetTerminology");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_GetTerminologyCommand");
var se_ImportTerminologyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("ImportTerminology");
  let body;
  body = JSON.stringify(se_ImportTerminologyRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ImportTerminologyCommand");
var se_ListLanguagesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("ListLanguages");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ListLanguagesCommand");
var se_ListParallelDataCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("ListParallelData");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ListParallelDataCommand");
var se_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("ListTagsForResource");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ListTagsForResourceCommand");
var se_ListTerminologiesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("ListTerminologies");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ListTerminologiesCommand");
var se_ListTextTranslationJobsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("ListTextTranslationJobs");
  let body;
  body = JSON.stringify(se_ListTextTranslationJobsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ListTextTranslationJobsCommand");
var se_StartTextTranslationJobCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("StartTextTranslationJob");
  let body;
  body = JSON.stringify(se_StartTextTranslationJobRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_StartTextTranslationJobCommand");
var se_StopTextTranslationJobCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("StopTextTranslationJob");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_StopTextTranslationJobCommand");
var se_TagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("TagResource");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_TagResourceCommand");
var se_TranslateDocumentCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("TranslateDocument");
  let body;
  body = JSON.stringify(se_TranslateDocumentRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_TranslateDocumentCommand");
var se_TranslateTextCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("TranslateText");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_TranslateTextCommand");
var se_UntagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("UntagResource");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_UntagResourceCommand");
var se_UpdateParallelDataCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("UpdateParallelData");
  let body;
  body = JSON.stringify(se_UpdateParallelDataRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_UpdateParallelDataCommand");
var de_CreateParallelDataCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = (0, import_smithy_client._json)(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CreateParallelDataCommand");
var de_DeleteParallelDataCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = (0, import_smithy_client._json)(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DeleteParallelDataCommand");
var de_DeleteTerminologyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await (0, import_smithy_client.collectBody)(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
}, "de_DeleteTerminologyCommand");
var de_DescribeTextTranslationJobCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = de_DescribeTextTranslationJobResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeTextTranslationJobCommand");
var de_GetParallelDataCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = de_GetParallelDataResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_GetParallelDataCommand");
var de_GetTerminologyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = de_GetTerminologyResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_GetTerminologyCommand");
var de_ImportTerminologyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = de_ImportTerminologyResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ImportTerminologyCommand");
var de_ListLanguagesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = (0, import_smithy_client._json)(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ListLanguagesCommand");
var de_ListParallelDataCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = de_ListParallelDataResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ListParallelDataCommand");
var de_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = (0, import_smithy_client._json)(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ListTagsForResourceCommand");
var de_ListTerminologiesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = de_ListTerminologiesResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ListTerminologiesCommand");
var de_ListTextTranslationJobsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = de_ListTextTranslationJobsResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ListTextTranslationJobsCommand");
var de_StartTextTranslationJobCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = (0, import_smithy_client._json)(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_StartTextTranslationJobCommand");
var de_StopTextTranslationJobCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = (0, import_smithy_client._json)(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_StopTextTranslationJobCommand");
var de_TagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = (0, import_smithy_client._json)(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_TagResourceCommand");
var de_TranslateDocumentCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = de_TranslateDocumentResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_TranslateDocumentCommand");
var de_TranslateTextCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = (0, import_smithy_client._json)(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_TranslateTextCommand");
var de_UntagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = (0, import_smithy_client._json)(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_UntagResourceCommand");
var de_UpdateParallelDataCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = de_UpdateParallelDataResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_UpdateParallelDataCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseJsonErrorBody)(output.body, context)
  };
  const errorCode = (0, import_core2.loadRestJsonErrorCode)(output, parsedOutput.body);
  switch (errorCode) {
    case "ConcurrentModificationException":
    case "com.amazonaws.translate#ConcurrentModificationException":
      throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.translate#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalServerException":
    case "com.amazonaws.translate#InternalServerException":
      throw await de_InternalServerExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.translate#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.translate#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.translate#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.translate#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    case "TooManyTagsException":
    case "com.amazonaws.translate#TooManyTagsException":
      throw await de_TooManyTagsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.translate#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "UnsupportedDisplayLanguageCodeException":
    case "com.amazonaws.translate#UnsupportedDisplayLanguageCodeException":
      throw await de_UnsupportedDisplayLanguageCodeExceptionRes(parsedOutput, context);
    case "InvalidFilterException":
    case "com.amazonaws.translate#InvalidFilterException":
      throw await de_InvalidFilterExceptionRes(parsedOutput, context);
    case "UnsupportedLanguagePairException":
    case "com.amazonaws.translate#UnsupportedLanguagePairException":
      throw await de_UnsupportedLanguagePairExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.translate#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "DetectedLanguageLowConfidenceException":
    case "com.amazonaws.translate#DetectedLanguageLowConfidenceException":
      throw await de_DetectedLanguageLowConfidenceExceptionRes(parsedOutput, context);
    case "TextSizeLimitExceededException":
    case "com.amazonaws.translate#TextSizeLimitExceededException":
      throw await de_TextSizeLimitExceededExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CommandError");
var de_ConcurrentModificationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new ConcurrentModificationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ConcurrentModificationExceptionRes");
var de_ConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new ConflictException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ConflictExceptionRes");
var de_DetectedLanguageLowConfidenceExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new DetectedLanguageLowConfidenceException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DetectedLanguageLowConfidenceExceptionRes");
var de_InternalServerExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new InternalServerException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InternalServerExceptionRes");
var de_InvalidFilterExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new InvalidFilterException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidFilterExceptionRes");
var de_InvalidParameterValueExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new InvalidParameterValueException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidParameterValueExceptionRes");
var de_InvalidRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new InvalidRequestException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidRequestExceptionRes");
var de_LimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new LimitExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_LimitExceededExceptionRes");
var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new ResourceNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ResourceNotFoundExceptionRes");
var de_ServiceUnavailableExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new ServiceUnavailableException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ServiceUnavailableExceptionRes");
var de_TextSizeLimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new TextSizeLimitExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_TextSizeLimitExceededExceptionRes");
var de_TooManyRequestsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new TooManyRequestsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_TooManyRequestsExceptionRes");
var de_TooManyTagsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new TooManyTagsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_TooManyTagsExceptionRes");
var de_UnsupportedDisplayLanguageCodeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new UnsupportedDisplayLanguageCodeException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_UnsupportedDisplayLanguageCodeExceptionRes");
var de_UnsupportedLanguagePairExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new UnsupportedLanguagePairException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_UnsupportedLanguagePairExceptionRes");
var se_CreateParallelDataRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    ClientToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
    Description: [],
    EncryptionKey: import_smithy_client._json,
    Name: [],
    ParallelDataConfig: import_smithy_client._json,
    Tags: import_smithy_client._json
  });
}, "se_CreateParallelDataRequest");
var se_Document = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    Content: context.base64Encoder,
    ContentType: []
  });
}, "se_Document");
var se_ImportTerminologyRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    Description: [],
    EncryptionKey: import_smithy_client._json,
    MergeStrategy: [],
    Name: [],
    Tags: import_smithy_client._json,
    TerminologyData: /* @__PURE__ */ __name((_) => se_TerminologyData(_, context), "TerminologyData")
  });
}, "se_ImportTerminologyRequest");
var se_ListTextTranslationJobsRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    Filter: /* @__PURE__ */ __name((_) => se_TextTranslationJobFilter(_, context), "Filter"),
    MaxResults: [],
    NextToken: []
  });
}, "se_ListTextTranslationJobsRequest");
var se_StartTextTranslationJobRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    ClientToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
    DataAccessRoleArn: [],
    InputDataConfig: import_smithy_client._json,
    JobName: [],
    OutputDataConfig: import_smithy_client._json,
    ParallelDataNames: import_smithy_client._json,
    Settings: import_smithy_client._json,
    SourceLanguageCode: [],
    TargetLanguageCodes: import_smithy_client._json,
    TerminologyNames: import_smithy_client._json
  });
}, "se_StartTextTranslationJobRequest");
var se_TerminologyData = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    Directionality: [],
    File: context.base64Encoder,
    Format: []
  });
}, "se_TerminologyData");
var se_TextTranslationJobFilter = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    JobName: [],
    JobStatus: [],
    SubmittedAfterTime: /* @__PURE__ */ __name((_) => _.getTime() / 1e3, "SubmittedAfterTime"),
    SubmittedBeforeTime: /* @__PURE__ */ __name((_) => _.getTime() / 1e3, "SubmittedBeforeTime")
  });
}, "se_TextTranslationJobFilter");
var se_TranslateDocumentRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    Document: /* @__PURE__ */ __name((_) => se_Document(_, context), "Document"),
    Settings: import_smithy_client._json,
    SourceLanguageCode: [],
    TargetLanguageCode: [],
    TerminologyNames: import_smithy_client._json
  });
}, "se_TranslateDocumentRequest");
var se_UpdateParallelDataRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    ClientToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
    Description: [],
    Name: [],
    ParallelDataConfig: import_smithy_client._json
  });
}, "se_UpdateParallelDataRequest");
var de_DescribeTextTranslationJobResponse = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    TextTranslationJobProperties: /* @__PURE__ */ __name((_) => de_TextTranslationJobProperties(_, context), "TextTranslationJobProperties")
  });
}, "de_DescribeTextTranslationJobResponse");
var de_GetParallelDataResponse = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AuxiliaryDataLocation: import_smithy_client._json,
    DataLocation: import_smithy_client._json,
    LatestUpdateAttemptAuxiliaryDataLocation: import_smithy_client._json,
    ParallelDataProperties: /* @__PURE__ */ __name((_) => de_ParallelDataProperties(_, context), "ParallelDataProperties")
  });
}, "de_GetParallelDataResponse");
var de_GetTerminologyResponse = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AuxiliaryDataLocation: import_smithy_client._json,
    TerminologyDataLocation: import_smithy_client._json,
    TerminologyProperties: /* @__PURE__ */ __name((_) => de_TerminologyProperties(_, context), "TerminologyProperties")
  });
}, "de_GetTerminologyResponse");
var de_ImportTerminologyResponse = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AuxiliaryDataLocation: import_smithy_client._json,
    TerminologyProperties: /* @__PURE__ */ __name((_) => de_TerminologyProperties(_, context), "TerminologyProperties")
  });
}, "de_ImportTerminologyResponse");
var de_ListParallelDataResponse = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    NextToken: import_smithy_client.expectString,
    ParallelDataPropertiesList: /* @__PURE__ */ __name((_) => de_ParallelDataPropertiesList(_, context), "ParallelDataPropertiesList")
  });
}, "de_ListParallelDataResponse");
var de_ListTerminologiesResponse = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    NextToken: import_smithy_client.expectString,
    TerminologyPropertiesList: /* @__PURE__ */ __name((_) => de_TerminologyPropertiesList(_, context), "TerminologyPropertiesList")
  });
}, "de_ListTerminologiesResponse");
var de_ListTextTranslationJobsResponse = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    NextToken: import_smithy_client.expectString,
    TextTranslationJobPropertiesList: /* @__PURE__ */ __name((_) => de_TextTranslationJobPropertiesList(_, context), "TextTranslationJobPropertiesList")
  });
}, "de_ListTextTranslationJobsResponse");
var de_ParallelDataProperties = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Arn: import_smithy_client.expectString,
    CreatedAt: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), "CreatedAt"),
    Description: import_smithy_client.expectString,
    EncryptionKey: import_smithy_client._json,
    FailedRecordCount: import_smithy_client.expectLong,
    ImportedDataSize: import_smithy_client.expectLong,
    ImportedRecordCount: import_smithy_client.expectLong,
    LastUpdatedAt: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), "LastUpdatedAt"),
    LatestUpdateAttemptAt: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), "LatestUpdateAttemptAt"),
    LatestUpdateAttemptStatus: import_smithy_client.expectString,
    Message: import_smithy_client.expectString,
    Name: import_smithy_client.expectString,
    ParallelDataConfig: import_smithy_client._json,
    SkippedRecordCount: import_smithy_client.expectLong,
    SourceLanguageCode: import_smithy_client.expectString,
    Status: import_smithy_client.expectString,
    TargetLanguageCodes: import_smithy_client._json
  });
}, "de_ParallelDataProperties");
var de_ParallelDataPropertiesList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ParallelDataProperties(entry, context);
  });
  return retVal;
}, "de_ParallelDataPropertiesList");
var de_TerminologyProperties = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Arn: import_smithy_client.expectString,
    CreatedAt: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), "CreatedAt"),
    Description: import_smithy_client.expectString,
    Directionality: import_smithy_client.expectString,
    EncryptionKey: import_smithy_client._json,
    Format: import_smithy_client.expectString,
    LastUpdatedAt: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), "LastUpdatedAt"),
    Message: import_smithy_client.expectString,
    Name: import_smithy_client.expectString,
    SizeBytes: import_smithy_client.expectInt32,
    SkippedTermCount: import_smithy_client.expectInt32,
    SourceLanguageCode: import_smithy_client.expectString,
    TargetLanguageCodes: import_smithy_client._json,
    TermCount: import_smithy_client.expectInt32
  });
}, "de_TerminologyProperties");
var de_TerminologyPropertiesList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_TerminologyProperties(entry, context);
  });
  return retVal;
}, "de_TerminologyPropertiesList");
var de_TextTranslationJobProperties = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    DataAccessRoleArn: import_smithy_client.expectString,
    EndTime: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), "EndTime"),
    InputDataConfig: import_smithy_client._json,
    JobDetails: import_smithy_client._json,
    JobId: import_smithy_client.expectString,
    JobName: import_smithy_client.expectString,
    JobStatus: import_smithy_client.expectString,
    Message: import_smithy_client.expectString,
    OutputDataConfig: import_smithy_client._json,
    ParallelDataNames: import_smithy_client._json,
    Settings: import_smithy_client._json,
    SourceLanguageCode: import_smithy_client.expectString,
    SubmittedTime: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), "SubmittedTime"),
    TargetLanguageCodes: import_smithy_client._json,
    TerminologyNames: import_smithy_client._json
  });
}, "de_TextTranslationJobProperties");
var de_TextTranslationJobPropertiesList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_TextTranslationJobProperties(entry, context);
  });
  return retVal;
}, "de_TextTranslationJobPropertiesList");
var de_TranslatedDocument = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Content: context.base64Decoder
  });
}, "de_TranslatedDocument");
var de_TranslateDocumentResponse = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AppliedSettings: import_smithy_client._json,
    AppliedTerminologies: import_smithy_client._json,
    SourceLanguageCode: import_smithy_client.expectString,
    TargetLanguageCode: import_smithy_client.expectString,
    TranslatedDocument: /* @__PURE__ */ __name((_) => de_TranslatedDocument(_, context), "TranslatedDocument")
  });
}, "de_TranslateDocumentResponse");
var de_UpdateParallelDataResponse = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    LatestUpdateAttemptAt: /* @__PURE__ */ __name((_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), "LatestUpdateAttemptAt"),
    LatestUpdateAttemptStatus: import_smithy_client.expectString,
    Name: import_smithy_client.expectString,
    Status: import_smithy_client.expectString
  });
}, "de_UpdateParallelDataResponse");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var throwDefaultError = (0, import_smithy_client.withBaseException)(TranslateServiceException);
var buildHttpRpcRequest = /* @__PURE__ */ __name(async (context, headers, path, resolvedHostname, body) => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const contents = {
    protocol,
    hostname,
    port,
    method: "POST",
    path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
    headers
  };
  if (resolvedHostname !== void 0) {
    contents.hostname = resolvedHostname;
  }
  if (body !== void 0) {
    contents.body = body;
  }
  return new import_protocol_http.HttpRequest(contents);
}, "buildHttpRpcRequest");
function sharedHeaders(operation) {
  return {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": `AWSShineFrontendService_20170701.${operation}`
  };
}
__name(sharedHeaders, "sharedHeaders");

// src/commands/CreateParallelDataCommand.ts
var CreateParallelDataCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSShineFrontendService_20170701", "CreateParallelData", {}).n("TranslateClient", "CreateParallelDataCommand").f(void 0, void 0).ser(se_CreateParallelDataCommand).de(de_CreateParallelDataCommand).build() {
  static {
    __name(this, "CreateParallelDataCommand");
  }
};

// src/commands/DeleteParallelDataCommand.ts



var DeleteParallelDataCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSShineFrontendService_20170701", "DeleteParallelData", {}).n("TranslateClient", "DeleteParallelDataCommand").f(void 0, void 0).ser(se_DeleteParallelDataCommand).de(de_DeleteParallelDataCommand).build() {
  static {
    __name(this, "DeleteParallelDataCommand");
  }
};

// src/commands/DeleteTerminologyCommand.ts



var DeleteTerminologyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSShineFrontendService_20170701", "DeleteTerminology", {}).n("TranslateClient", "DeleteTerminologyCommand").f(void 0, void 0).ser(se_DeleteTerminologyCommand).de(de_DeleteTerminologyCommand).build() {
  static {
    __name(this, "DeleteTerminologyCommand");
  }
};

// src/commands/DescribeTextTranslationJobCommand.ts



var DescribeTextTranslationJobCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSShineFrontendService_20170701", "DescribeTextTranslationJob", {}).n("TranslateClient", "DescribeTextTranslationJobCommand").f(void 0, void 0).ser(se_DescribeTextTranslationJobCommand).de(de_DescribeTextTranslationJobCommand).build() {
  static {
    __name(this, "DescribeTextTranslationJobCommand");
  }
};

// src/commands/GetParallelDataCommand.ts



var GetParallelDataCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSShineFrontendService_20170701", "GetParallelData", {}).n("TranslateClient", "GetParallelDataCommand").f(void 0, void 0).ser(se_GetParallelDataCommand).de(de_GetParallelDataCommand).build() {
  static {
    __name(this, "GetParallelDataCommand");
  }
};

// src/commands/GetTerminologyCommand.ts



var GetTerminologyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSShineFrontendService_20170701", "GetTerminology", {}).n("TranslateClient", "GetTerminologyCommand").f(void 0, void 0).ser(se_GetTerminologyCommand).de(de_GetTerminologyCommand).build() {
  static {
    __name(this, "GetTerminologyCommand");
  }
};

// src/commands/ImportTerminologyCommand.ts



var ImportTerminologyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSShineFrontendService_20170701", "ImportTerminology", {}).n("TranslateClient", "ImportTerminologyCommand").f(ImportTerminologyRequestFilterSensitiveLog, void 0).ser(se_ImportTerminologyCommand).de(de_ImportTerminologyCommand).build() {
  static {
    __name(this, "ImportTerminologyCommand");
  }
};

// src/commands/ListLanguagesCommand.ts



var ListLanguagesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSShineFrontendService_20170701", "ListLanguages", {}).n("TranslateClient", "ListLanguagesCommand").f(void 0, void 0).ser(se_ListLanguagesCommand).de(de_ListLanguagesCommand).build() {
  static {
    __name(this, "ListLanguagesCommand");
  }
};

// src/commands/ListParallelDataCommand.ts



var ListParallelDataCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSShineFrontendService_20170701", "ListParallelData", {}).n("TranslateClient", "ListParallelDataCommand").f(void 0, void 0).ser(se_ListParallelDataCommand).de(de_ListParallelDataCommand).build() {
  static {
    __name(this, "ListParallelDataCommand");
  }
};

// src/commands/ListTagsForResourceCommand.ts



var ListTagsForResourceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSShineFrontendService_20170701", "ListTagsForResource", {}).n("TranslateClient", "ListTagsForResourceCommand").f(void 0, void 0).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
  static {
    __name(this, "ListTagsForResourceCommand");
  }
};

// src/commands/ListTerminologiesCommand.ts



var ListTerminologiesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSShineFrontendService_20170701", "ListTerminologies", {}).n("TranslateClient", "ListTerminologiesCommand").f(void 0, void 0).ser(se_ListTerminologiesCommand).de(de_ListTerminologiesCommand).build() {
  static {
    __name(this, "ListTerminologiesCommand");
  }
};

// src/commands/ListTextTranslationJobsCommand.ts



var ListTextTranslationJobsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSShineFrontendService_20170701", "ListTextTranslationJobs", {}).n("TranslateClient", "ListTextTranslationJobsCommand").f(void 0, void 0).ser(se_ListTextTranslationJobsCommand).de(de_ListTextTranslationJobsCommand).build() {
  static {
    __name(this, "ListTextTranslationJobsCommand");
  }
};

// src/commands/StartTextTranslationJobCommand.ts



var StartTextTranslationJobCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSShineFrontendService_20170701", "StartTextTranslationJob", {}).n("TranslateClient", "StartTextTranslationJobCommand").f(void 0, void 0).ser(se_StartTextTranslationJobCommand).de(de_StartTextTranslationJobCommand).build() {
  static {
    __name(this, "StartTextTranslationJobCommand");
  }
};

// src/commands/StopTextTranslationJobCommand.ts



var StopTextTranslationJobCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSShineFrontendService_20170701", "StopTextTranslationJob", {}).n("TranslateClient", "StopTextTranslationJobCommand").f(void 0, void 0).ser(se_StopTextTranslationJobCommand).de(de_StopTextTranslationJobCommand).build() {
  static {
    __name(this, "StopTextTranslationJobCommand");
  }
};

// src/commands/TagResourceCommand.ts



var TagResourceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSShineFrontendService_20170701", "TagResource", {}).n("TranslateClient", "TagResourceCommand").f(void 0, void 0).ser(se_TagResourceCommand).de(de_TagResourceCommand).build() {
  static {
    __name(this, "TagResourceCommand");
  }
};

// src/commands/TranslateDocumentCommand.ts



var TranslateDocumentCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSShineFrontendService_20170701", "TranslateDocument", {}).n("TranslateClient", "TranslateDocumentCommand").f(TranslateDocumentRequestFilterSensitiveLog, TranslateDocumentResponseFilterSensitiveLog).ser(se_TranslateDocumentCommand).de(de_TranslateDocumentCommand).build() {
  static {
    __name(this, "TranslateDocumentCommand");
  }
};

// src/commands/TranslateTextCommand.ts



var TranslateTextCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSShineFrontendService_20170701", "TranslateText", {}).n("TranslateClient", "TranslateTextCommand").f(void 0, void 0).ser(se_TranslateTextCommand).de(de_TranslateTextCommand).build() {
  static {
    __name(this, "TranslateTextCommand");
  }
};

// src/commands/UntagResourceCommand.ts



var UntagResourceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSShineFrontendService_20170701", "UntagResource", {}).n("TranslateClient", "UntagResourceCommand").f(void 0, void 0).ser(se_UntagResourceCommand).de(de_UntagResourceCommand).build() {
  static {
    __name(this, "UntagResourceCommand");
  }
};

// src/commands/UpdateParallelDataCommand.ts



var UpdateParallelDataCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSShineFrontendService_20170701", "UpdateParallelData", {}).n("TranslateClient", "UpdateParallelDataCommand").f(void 0, void 0).ser(se_UpdateParallelDataCommand).de(de_UpdateParallelDataCommand).build() {
  static {
    __name(this, "UpdateParallelDataCommand");
  }
};

// src/Translate.ts
var commands = {
  CreateParallelDataCommand,
  DeleteParallelDataCommand,
  DeleteTerminologyCommand,
  DescribeTextTranslationJobCommand,
  GetParallelDataCommand,
  GetTerminologyCommand,
  ImportTerminologyCommand,
  ListLanguagesCommand,
  ListParallelDataCommand,
  ListTagsForResourceCommand,
  ListTerminologiesCommand,
  ListTextTranslationJobsCommand,
  StartTextTranslationJobCommand,
  StopTextTranslationJobCommand,
  TagResourceCommand,
  TranslateDocumentCommand,
  TranslateTextCommand,
  UntagResourceCommand,
  UpdateParallelDataCommand
};
var Translate = class extends TranslateClient {
  static {
    __name(this, "Translate");
  }
};
(0, import_smithy_client.createAggregatedClient)(commands, Translate);

// src/pagination/ListLanguagesPaginator.ts

var paginateListLanguages = (0, import_core.createPaginator)(TranslateClient, ListLanguagesCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListParallelDataPaginator.ts

var paginateListParallelData = (0, import_core.createPaginator)(TranslateClient, ListParallelDataCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListTerminologiesPaginator.ts

var paginateListTerminologies = (0, import_core.createPaginator)(TranslateClient, ListTerminologiesCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListTextTranslationJobsPaginator.ts

var paginateListTextTranslationJobs = (0, import_core.createPaginator)(TranslateClient, ListTextTranslationJobsCommand, "NextToken", "NextToken", "MaxResults");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  TranslateServiceException,
  __Client,
  TranslateClient,
  Translate,
  $Command,
  CreateParallelDataCommand,
  DeleteParallelDataCommand,
  DeleteTerminologyCommand,
  DescribeTextTranslationJobCommand,
  GetParallelDataCommand,
  GetTerminologyCommand,
  ImportTerminologyCommand,
  ListLanguagesCommand,
  ListParallelDataCommand,
  ListTagsForResourceCommand,
  ListTerminologiesCommand,
  ListTextTranslationJobsCommand,
  StartTextTranslationJobCommand,
  StopTextTranslationJobCommand,
  TagResourceCommand,
  TranslateDocumentCommand,
  TranslateTextCommand,
  UntagResourceCommand,
  UpdateParallelDataCommand,
  paginateListLanguages,
  paginateListParallelData,
  paginateListTerminologies,
  paginateListTextTranslationJobs,
  ConcurrentModificationException,
  ConflictException,
  EncryptionKeyType,
  ParallelDataFormat,
  ParallelDataStatus,
  InternalServerException,
  InvalidParameterValueException,
  InvalidRequestException,
  LimitExceededException,
  TooManyRequestsException,
  TooManyTagsException,
  ResourceNotFoundException,
  JobStatus,
  Brevity,
  Formality,
  Profanity,
  TerminologyDataFormat,
  Directionality,
  MergeStrategy,
  DisplayLanguageCode,
  UnsupportedDisplayLanguageCodeException,
  InvalidFilterException,
  UnsupportedLanguagePairException,
  ServiceUnavailableException,
  DetectedLanguageLowConfidenceException,
  TextSizeLimitExceededException,
  TerminologyDataFilterSensitiveLog,
  ImportTerminologyRequestFilterSensitiveLog,
  DocumentFilterSensitiveLog,
  TranslateDocumentRequestFilterSensitiveLog,
  TranslatedDocumentFilterSensitiveLog,
  TranslateDocumentResponseFilterSensitiveLog
});

