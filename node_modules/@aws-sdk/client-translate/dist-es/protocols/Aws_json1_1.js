import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { ConcurrentModificationException, ConflictException, DetectedLanguageLowConfidenceException, InternalServerException, InvalidFilterException, InvalidParameterValueException, InvalidRequestException, LimitExceededException, ResourceNotFoundException, ServiceUnavailableException, TextSizeLimitExceededException, TooManyRequestsException, TooManyTagsException, UnsupportedDisplayLanguageCodeException, UnsupportedLanguagePairException, } from "../models/models_0";
import { TranslateServiceException as __BaseException } from "../models/TranslateServiceException";
export const se_CreateParallelDataCommand = async (input, context) => {
    const headers = sharedHeaders("CreateParallelData");
    let body;
    body = JSON.stringify(se_CreateParallelDataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteParallelDataCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteParallelData");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTerminologyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTerminology");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTextTranslationJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTextTranslationJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetParallelDataCommand = async (input, context) => {
    const headers = sharedHeaders("GetParallelData");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetTerminologyCommand = async (input, context) => {
    const headers = sharedHeaders("GetTerminology");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ImportTerminologyCommand = async (input, context) => {
    const headers = sharedHeaders("ImportTerminology");
    let body;
    body = JSON.stringify(se_ImportTerminologyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListLanguagesCommand = async (input, context) => {
    const headers = sharedHeaders("ListLanguages");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListParallelDataCommand = async (input, context) => {
    const headers = sharedHeaders("ListParallelData");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTerminologiesCommand = async (input, context) => {
    const headers = sharedHeaders("ListTerminologies");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTextTranslationJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListTextTranslationJobs");
    let body;
    body = JSON.stringify(se_ListTextTranslationJobsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartTextTranslationJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartTextTranslationJob");
    let body;
    body = JSON.stringify(se_StartTextTranslationJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopTextTranslationJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopTextTranslationJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TranslateDocumentCommand = async (input, context) => {
    const headers = sharedHeaders("TranslateDocument");
    let body;
    body = JSON.stringify(se_TranslateDocumentRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TranslateTextCommand = async (input, context) => {
    const headers = sharedHeaders("TranslateText");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateParallelDataCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateParallelData");
    let body;
    body = JSON.stringify(se_UpdateParallelDataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_CreateParallelDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteParallelDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteTerminologyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DescribeTextTranslationJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTextTranslationJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetParallelDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetParallelDataResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetTerminologyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetTerminologyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ImportTerminologyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ImportTerminologyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListLanguagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListParallelDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListParallelDataResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTerminologiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListTerminologiesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTextTranslationJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListTextTranslationJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartTextTranslationJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopTextTranslationJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TranslateDocumentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_TranslateDocumentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TranslateTextCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateParallelDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateParallelDataResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.translate#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.translate#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.translate#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterValueException":
        case "com.amazonaws.translate#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.translate#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.translate#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.translate#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.translate#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.translate#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "UnsupportedDisplayLanguageCodeException":
        case "com.amazonaws.translate#UnsupportedDisplayLanguageCodeException":
            throw await de_UnsupportedDisplayLanguageCodeExceptionRes(parsedOutput, context);
        case "InvalidFilterException":
        case "com.amazonaws.translate#InvalidFilterException":
            throw await de_InvalidFilterExceptionRes(parsedOutput, context);
        case "UnsupportedLanguagePairException":
        case "com.amazonaws.translate#UnsupportedLanguagePairException":
            throw await de_UnsupportedLanguagePairExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.translate#ServiceUnavailableException":
            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "DetectedLanguageLowConfidenceException":
        case "com.amazonaws.translate#DetectedLanguageLowConfidenceException":
            throw await de_DetectedLanguageLowConfidenceExceptionRes(parsedOutput, context);
        case "TextSizeLimitExceededException":
        case "com.amazonaws.translate#TextSizeLimitExceededException":
            throw await de_TextSizeLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ConcurrentModificationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConcurrentModificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_DetectedLanguageLowConfidenceExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new DetectedLanguageLowConfidenceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidFilterExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidFilterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidParameterValueExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidParameterValueException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ServiceUnavailableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ServiceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TextSizeLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TextSizeLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyTagsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_UnsupportedDisplayLanguageCodeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new UnsupportedDisplayLanguageCodeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_UnsupportedLanguagePairExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new UnsupportedLanguagePairException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_CreateParallelDataRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Description: [],
        EncryptionKey: _json,
        Name: [],
        ParallelDataConfig: _json,
        Tags: _json,
    });
};
const se_Document = (input, context) => {
    return take(input, {
        Content: context.base64Encoder,
        ContentType: [],
    });
};
const se_ImportTerminologyRequest = (input, context) => {
    return take(input, {
        Description: [],
        EncryptionKey: _json,
        MergeStrategy: [],
        Name: [],
        Tags: _json,
        TerminologyData: (_) => se_TerminologyData(_, context),
    });
};
const se_ListTextTranslationJobsRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_TextTranslationJobFilter(_, context),
        MaxResults: [],
        NextToken: [],
    });
};
const se_StartTextTranslationJobRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DataAccessRoleArn: [],
        InputDataConfig: _json,
        JobName: [],
        OutputDataConfig: _json,
        ParallelDataNames: _json,
        Settings: _json,
        SourceLanguageCode: [],
        TargetLanguageCodes: _json,
        TerminologyNames: _json,
    });
};
const se_TerminologyData = (input, context) => {
    return take(input, {
        Directionality: [],
        File: context.base64Encoder,
        Format: [],
    });
};
const se_TextTranslationJobFilter = (input, context) => {
    return take(input, {
        JobName: [],
        JobStatus: [],
        SubmittedAfterTime: (_) => _.getTime() / 1_000,
        SubmittedBeforeTime: (_) => _.getTime() / 1_000,
    });
};
const se_TranslateDocumentRequest = (input, context) => {
    return take(input, {
        Document: (_) => se_Document(_, context),
        Settings: _json,
        SourceLanguageCode: [],
        TargetLanguageCode: [],
        TerminologyNames: _json,
    });
};
const se_UpdateParallelDataRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Description: [],
        Name: [],
        ParallelDataConfig: _json,
    });
};
const de_DescribeTextTranslationJobResponse = (output, context) => {
    return take(output, {
        TextTranslationJobProperties: (_) => de_TextTranslationJobProperties(_, context),
    });
};
const de_GetParallelDataResponse = (output, context) => {
    return take(output, {
        AuxiliaryDataLocation: _json,
        DataLocation: _json,
        LatestUpdateAttemptAuxiliaryDataLocation: _json,
        ParallelDataProperties: (_) => de_ParallelDataProperties(_, context),
    });
};
const de_GetTerminologyResponse = (output, context) => {
    return take(output, {
        AuxiliaryDataLocation: _json,
        TerminologyDataLocation: _json,
        TerminologyProperties: (_) => de_TerminologyProperties(_, context),
    });
};
const de_ImportTerminologyResponse = (output, context) => {
    return take(output, {
        AuxiliaryDataLocation: _json,
        TerminologyProperties: (_) => de_TerminologyProperties(_, context),
    });
};
const de_ListParallelDataResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        ParallelDataPropertiesList: (_) => de_ParallelDataPropertiesList(_, context),
    });
};
const de_ListTerminologiesResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        TerminologyPropertiesList: (_) => de_TerminologyPropertiesList(_, context),
    });
};
const de_ListTextTranslationJobsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        TextTranslationJobPropertiesList: (_) => de_TextTranslationJobPropertiesList(_, context),
    });
};
const de_ParallelDataProperties = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        EncryptionKey: _json,
        FailedRecordCount: __expectLong,
        ImportedDataSize: __expectLong,
        ImportedRecordCount: __expectLong,
        LastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LatestUpdateAttemptAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LatestUpdateAttemptStatus: __expectString,
        Message: __expectString,
        Name: __expectString,
        ParallelDataConfig: _json,
        SkippedRecordCount: __expectLong,
        SourceLanguageCode: __expectString,
        Status: __expectString,
        TargetLanguageCodes: _json,
    });
};
const de_ParallelDataPropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ParallelDataProperties(entry, context);
    });
    return retVal;
};
const de_TerminologyProperties = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        Directionality: __expectString,
        EncryptionKey: _json,
        Format: __expectString,
        LastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Message: __expectString,
        Name: __expectString,
        SizeBytes: __expectInt32,
        SkippedTermCount: __expectInt32,
        SourceLanguageCode: __expectString,
        TargetLanguageCodes: _json,
        TermCount: __expectInt32,
    });
};
const de_TerminologyPropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TerminologyProperties(entry, context);
    });
    return retVal;
};
const de_TextTranslationJobProperties = (output, context) => {
    return take(output, {
        DataAccessRoleArn: __expectString,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        InputDataConfig: _json,
        JobDetails: _json,
        JobId: __expectString,
        JobName: __expectString,
        JobStatus: __expectString,
        Message: __expectString,
        OutputDataConfig: _json,
        ParallelDataNames: _json,
        Settings: _json,
        SourceLanguageCode: __expectString,
        SubmittedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TargetLanguageCodes: _json,
        TerminologyNames: _json,
    });
};
const de_TextTranslationJobPropertiesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TextTranslationJobProperties(entry, context);
    });
    return retVal;
};
const de_TranslatedDocument = (output, context) => {
    return take(output, {
        Content: context.base64Decoder,
    });
};
const de_TranslateDocumentResponse = (output, context) => {
    return take(output, {
        AppliedSettings: _json,
        AppliedTerminologies: _json,
        SourceLanguageCode: __expectString,
        TargetLanguageCode: __expectString,
        TranslatedDocument: (_) => de_TranslatedDocument(_, context),
    });
};
const de_UpdateParallelDataResponse = (output, context) => {
    return take(output, {
        LatestUpdateAttemptAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LatestUpdateAttemptStatus: __expectString,
        Name: __expectString,
        Status: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AWSShineFrontendService_20170701.${operation}`,
    };
}
