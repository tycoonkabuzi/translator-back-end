import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { ComprehendServiceException as __BaseException } from "./ComprehendServiceException";
export const AugmentedManifestsDocumentTypeFormat = {
    PLAIN_TEXT_DOCUMENT: "PLAIN_TEXT_DOCUMENT",
    SEMI_STRUCTURED_DOCUMENT: "SEMI_STRUCTURED_DOCUMENT",
};
export const Split = {
    TEST: "TEST",
    TRAIN: "TRAIN",
};
export class BatchSizeLimitExceededException extends __BaseException {
    name = "BatchSizeLimitExceededException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "BatchSizeLimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, BatchSizeLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class InternalServerException extends __BaseException {
    name = "InternalServerException";
    $fault = "server";
    Message;
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
export const InvalidRequestDetailReason = {
    DOCUMENT_SIZE_EXCEEDED: "DOCUMENT_SIZE_EXCEEDED",
    PAGE_LIMIT_EXCEEDED: "PAGE_LIMIT_EXCEEDED",
    TEXTRACT_ACCESS_DENIED: "TEXTRACT_ACCESS_DENIED",
    UNSUPPORTED_DOC_TYPE: "UNSUPPORTED_DOC_TYPE",
};
export const InvalidRequestReason = {
    INVALID_DOCUMENT: "INVALID_DOCUMENT",
};
export class InvalidRequestException extends __BaseException {
    name = "InvalidRequestException";
    $fault = "client";
    Message;
    Reason;
    Detail;
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
        this.Message = opts.Message;
        this.Reason = opts.Reason;
        this.Detail = opts.Detail;
    }
}
export class TextSizeLimitExceededException extends __BaseException {
    name = "TextSizeLimitExceededException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "TextSizeLimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TextSizeLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export const LanguageCode = {
    AR: "ar",
    DE: "de",
    EN: "en",
    ES: "es",
    FR: "fr",
    HI: "hi",
    IT: "it",
    JA: "ja",
    KO: "ko",
    PT: "pt",
    ZH: "zh",
    ZH_TW: "zh-TW",
};
export const EntityType = {
    COMMERCIAL_ITEM: "COMMERCIAL_ITEM",
    DATE: "DATE",
    EVENT: "EVENT",
    LOCATION: "LOCATION",
    ORGANIZATION: "ORGANIZATION",
    OTHER: "OTHER",
    PERSON: "PERSON",
    QUANTITY: "QUANTITY",
    TITLE: "TITLE",
};
export class UnsupportedLanguageException extends __BaseException {
    name = "UnsupportedLanguageException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "UnsupportedLanguageException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnsupportedLanguageException.prototype);
        this.Message = opts.Message;
    }
}
export const SentimentType = {
    MIXED: "MIXED",
    NEGATIVE: "NEGATIVE",
    NEUTRAL: "NEUTRAL",
    POSITIVE: "POSITIVE",
};
export const SyntaxLanguageCode = {
    DE: "de",
    EN: "en",
    ES: "es",
    FR: "fr",
    IT: "it",
    PT: "pt",
};
export const PartOfSpeechTagType = {
    ADJ: "ADJ",
    ADP: "ADP",
    ADV: "ADV",
    AUX: "AUX",
    CCONJ: "CCONJ",
    CONJ: "CONJ",
    DET: "DET",
    INTJ: "INTJ",
    NOUN: "NOUN",
    NUM: "NUM",
    O: "O",
    PART: "PART",
    PRON: "PRON",
    PROPN: "PROPN",
    PUNCT: "PUNCT",
    SCONJ: "SCONJ",
    SYM: "SYM",
    VERB: "VERB",
};
export const TargetedSentimentEntityType = {
    ATTRIBUTE: "ATTRIBUTE",
    BOOK: "BOOK",
    BRAND: "BRAND",
    COMMERCIAL_ITEM: "COMMERCIAL_ITEM",
    DATE: "DATE",
    EVENT: "EVENT",
    FACILITY: "FACILITY",
    GAME: "GAME",
    LOCATION: "LOCATION",
    MOVIE: "MOVIE",
    MUSIC: "MUSIC",
    ORGANIZATION: "ORGANIZATION",
    OTHER: "OTHER",
    PERSON: "PERSON",
    PERSONAL_TITLE: "PERSONAL_TITLE",
    QUANTITY: "QUANTITY",
    SOFTWARE: "SOFTWARE",
};
export const BlockType = {
    LINE: "LINE",
    WORD: "WORD",
};
export const RelationshipType = {
    CHILD: "CHILD",
};
export const DocumentReadAction = {
    TEXTRACT_ANALYZE_DOCUMENT: "TEXTRACT_ANALYZE_DOCUMENT",
    TEXTRACT_DETECT_DOCUMENT_TEXT: "TEXTRACT_DETECT_DOCUMENT_TEXT",
};
export const DocumentReadMode = {
    FORCE_DOCUMENT_READ_ACTION: "FORCE_DOCUMENT_READ_ACTION",
    SERVICE_DEFAULT: "SERVICE_DEFAULT",
};
export const DocumentReadFeatureTypes = {
    FORMS: "FORMS",
    TABLES: "TABLES",
};
export const DocumentType = {
    IMAGE: "IMAGE",
    MS_WORD: "MS_WORD",
    NATIVE_PDF: "NATIVE_PDF",
    PLAIN_TEXT: "PLAIN_TEXT",
    SCANNED_PDF: "SCANNED_PDF",
    TEXTRACT_ANALYZE_DOCUMENT_JSON: "TEXTRACT_ANALYZE_DOCUMENT_JSON",
    TEXTRACT_DETECT_DOCUMENT_TEXT_JSON: "TEXTRACT_DETECT_DOCUMENT_TEXT_JSON",
};
export const PageBasedErrorCode = {
    INTERNAL_SERVER_ERROR: "INTERNAL_SERVER_ERROR",
    PAGE_CHARACTERS_EXCEEDED: "PAGE_CHARACTERS_EXCEEDED",
    PAGE_SIZE_EXCEEDED: "PAGE_SIZE_EXCEEDED",
    TEXTRACT_BAD_PAGE: "TEXTRACT_BAD_PAGE",
    TEXTRACT_PROVISIONED_THROUGHPUT_EXCEEDED: "TEXTRACT_PROVISIONED_THROUGHPUT_EXCEEDED",
};
export const PageBasedWarningCode = {
    INFERENCING_NATIVE_DOCUMENT_WITH_PLAINTEXT_TRAINED_MODEL: "INFERENCING_NATIVE_DOCUMENT_WITH_PLAINTEXT_TRAINED_MODEL",
    INFERENCING_PLAINTEXT_WITH_NATIVE_TRAINED_MODEL: "INFERENCING_PLAINTEXT_WITH_NATIVE_TRAINED_MODEL",
};
export class ResourceUnavailableException extends __BaseException {
    name = "ResourceUnavailableException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ResourceUnavailableException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceUnavailableException.prototype);
        this.Message = opts.Message;
    }
}
export const PiiEntityType = {
    ADDRESS: "ADDRESS",
    AGE: "AGE",
    ALL: "ALL",
    AWS_ACCESS_KEY: "AWS_ACCESS_KEY",
    AWS_SECRET_KEY: "AWS_SECRET_KEY",
    BANK_ACCOUNT_NUMBER: "BANK_ACCOUNT_NUMBER",
    BANK_ROUTING: "BANK_ROUTING",
    CA_HEALTH_NUMBER: "CA_HEALTH_NUMBER",
    CA_SOCIAL_INSURANCE_NUMBER: "CA_SOCIAL_INSURANCE_NUMBER",
    CREDIT_DEBIT_CVV: "CREDIT_DEBIT_CVV",
    CREDIT_DEBIT_EXPIRY: "CREDIT_DEBIT_EXPIRY",
    CREDIT_DEBIT_NUMBER: "CREDIT_DEBIT_NUMBER",
    DATE_TIME: "DATE_TIME",
    DRIVER_ID: "DRIVER_ID",
    EMAIL: "EMAIL",
    INTERNATIONAL_BANK_ACCOUNT_NUMBER: "INTERNATIONAL_BANK_ACCOUNT_NUMBER",
    IN_AADHAAR: "IN_AADHAAR",
    IN_NREGA: "IN_NREGA",
    IN_PERMANENT_ACCOUNT_NUMBER: "IN_PERMANENT_ACCOUNT_NUMBER",
    IN_VOTER_NUMBER: "IN_VOTER_NUMBER",
    IP_ADDRESS: "IP_ADDRESS",
    LICENSE_PLATE: "LICENSE_PLATE",
    MAC_ADDRESS: "MAC_ADDRESS",
    NAME: "NAME",
    PASSPORT_NUMBER: "PASSPORT_NUMBER",
    PASSWORD: "PASSWORD",
    PHONE: "PHONE",
    PIN: "PIN",
    SSN: "SSN",
    SWIFT_CODE: "SWIFT_CODE",
    UK_NATIONAL_HEALTH_SERVICE_NUMBER: "UK_NATIONAL_HEALTH_SERVICE_NUMBER",
    UK_NATIONAL_INSURANCE_NUMBER: "UK_NATIONAL_INSURANCE_NUMBER",
    UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER: "UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER",
    URL: "URL",
    USERNAME: "USERNAME",
    US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER: "US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER",
    VEHICLE_IDENTIFICATION_NUMBER: "VEHICLE_IDENTIFICATION_NUMBER",
};
export const DatasetType = {
    TEST: "TEST",
    TRAIN: "TRAIN",
};
export const DatasetDataFormat = {
    AUGMENTED_MANIFEST: "AUGMENTED_MANIFEST",
    COMPREHEND_CSV: "COMPREHEND_CSV",
};
export const InputFormat = {
    ONE_DOC_PER_FILE: "ONE_DOC_PER_FILE",
    ONE_DOC_PER_LINE: "ONE_DOC_PER_LINE",
};
export class ResourceInUseException extends __BaseException {
    name = "ResourceInUseException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ResourceInUseException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceLimitExceededException extends __BaseException {
    name = "ResourceLimitExceededException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ResourceLimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceNotFoundException extends __BaseException {
    name = "ResourceNotFoundException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class TooManyRequestsException extends __BaseException {
    name = "TooManyRequestsException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
        this.Message = opts.Message;
    }
}
export class TooManyTagsException extends __BaseException {
    name = "TooManyTagsException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "TooManyTagsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyTagsException.prototype);
        this.Message = opts.Message;
    }
}
export const DocumentClassifierDataFormat = {
    AUGMENTED_MANIFEST: "AUGMENTED_MANIFEST",
    COMPREHEND_CSV: "COMPREHEND_CSV",
};
export const DocumentClassifierDocumentTypeFormat = {
    PLAIN_TEXT_DOCUMENT: "PLAIN_TEXT_DOCUMENT",
    SEMI_STRUCTURED_DOCUMENT: "SEMI_STRUCTURED_DOCUMENT",
};
export const DocumentClassifierMode = {
    MULTI_CLASS: "MULTI_CLASS",
    MULTI_LABEL: "MULTI_LABEL",
};
export class KmsKeyValidationException extends __BaseException {
    name = "KmsKeyValidationException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "KmsKeyValidationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, KmsKeyValidationException.prototype);
        this.Message = opts.Message;
    }
}
export const EntityRecognizerDataFormat = {
    AUGMENTED_MANIFEST: "AUGMENTED_MANIFEST",
    COMPREHEND_CSV: "COMPREHEND_CSV",
};
export const ModelType = {
    DOCUMENT_CLASSIFIER: "DOCUMENT_CLASSIFIER",
    ENTITY_RECOGNIZER: "ENTITY_RECOGNIZER",
};
export const DatasetStatus = {
    COMPLETED: "COMPLETED",
    CREATING: "CREATING",
    FAILED: "FAILED",
};
export const JobStatus = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    STOPPED: "STOPPED",
    STOP_REQUESTED: "STOP_REQUESTED",
    SUBMITTED: "SUBMITTED",
};
export class JobNotFoundException extends __BaseException {
    name = "JobNotFoundException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "JobNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, JobNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export const ModelStatus = {
    DELETING: "DELETING",
    IN_ERROR: "IN_ERROR",
    STOPPED: "STOPPED",
    STOP_REQUESTED: "STOP_REQUESTED",
    SUBMITTED: "SUBMITTED",
    TRAINED: "TRAINED",
    TRAINED_WITH_WARNING: "TRAINED_WITH_WARNING",
    TRAINING: "TRAINING",
};
export const EndpointStatus = {
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    IN_SERVICE: "IN_SERVICE",
    UPDATING: "UPDATING",
};
export const FlywheelStatus = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    UPDATING: "UPDATING",
};
export const FlywheelIterationStatus = {
    COMPLETED: "COMPLETED",
    EVALUATING: "EVALUATING",
    FAILED: "FAILED",
    STOPPED: "STOPPED",
    STOP_REQUESTED: "STOP_REQUESTED",
    TRAINING: "TRAINING",
};
export const PiiEntitiesDetectionMode = {
    ONLY_OFFSETS: "ONLY_OFFSETS",
    ONLY_REDACTION: "ONLY_REDACTION",
};
export const PiiEntitiesDetectionMaskMode = {
    MASK: "MASK",
    REPLACE_WITH_PII_ENTITY_TYPE: "REPLACE_WITH_PII_ENTITY_TYPE",
};
export const ToxicContentType = {
    GRAPHIC: "GRAPHIC",
    HARASSMENT_OR_ABUSE: "HARASSMENT_OR_ABUSE",
    HATE_SPEECH: "HATE_SPEECH",
    INSULT: "INSULT",
    PROFANITY: "PROFANITY",
    SEXUAL: "SEXUAL",
    VIOLENCE_OR_THREAT: "VIOLENCE_OR_THREAT",
};
export class InvalidFilterException extends __BaseException {
    name = "InvalidFilterException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "InvalidFilterException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidFilterException.prototype);
        this.Message = opts.Message;
    }
}
export const BatchDetectDominantLanguageRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TextList && { TextList: SENSITIVE_STRING }),
});
export const BatchDetectDominantLanguageResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchDetectEntitiesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TextList && { TextList: SENSITIVE_STRING }),
});
export const BatchDetectEntitiesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchDetectKeyPhrasesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TextList && { TextList: SENSITIVE_STRING }),
});
export const BatchDetectKeyPhrasesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchDetectSentimentRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TextList && { TextList: SENSITIVE_STRING }),
});
export const BatchDetectSentimentResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchDetectSyntaxRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TextList && { TextList: SENSITIVE_STRING }),
});
export const BatchDetectSyntaxResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchDetectTargetedSentimentRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TextList && { TextList: SENSITIVE_STRING }),
});
export const BatchDetectTargetedSentimentResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ClassifierMetadataFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ClassifyDocumentRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Text && { Text: SENSITIVE_STRING }),
});
export const ClassifyDocumentResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DocumentClassifierPropertiesFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClassifierMetadata && { ClassifierMetadata: SENSITIVE_STRING }),
});
export const DescribeDocumentClassifierResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DocumentClassifierProperties && {
        DocumentClassifierProperties: DocumentClassifierPropertiesFilterSensitiveLog(obj.DocumentClassifierProperties),
    }),
});
export const EntityRecognizerMetadataFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const EntityRecognizerPropertiesFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.RecognizerMetadata && { RecognizerMetadata: SENSITIVE_STRING }),
});
export const DescribeEntityRecognizerResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EntityRecognizerProperties && {
        EntityRecognizerProperties: EntityRecognizerPropertiesFilterSensitiveLog(obj.EntityRecognizerProperties),
    }),
});
export const DetectDominantLanguageRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Text && { Text: SENSITIVE_STRING }),
});
export const DetectDominantLanguageResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DetectEntitiesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Text && { Text: SENSITIVE_STRING }),
});
export const DetectEntitiesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DetectKeyPhrasesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Text && { Text: SENSITIVE_STRING }),
});
export const DetectKeyPhrasesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DetectSentimentRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Text && { Text: SENSITIVE_STRING }),
});
export const DetectSentimentResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DetectSyntaxRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Text && { Text: SENSITIVE_STRING }),
});
export const DetectSyntaxResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DetectTargetedSentimentRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Text && { Text: SENSITIVE_STRING }),
});
export const DetectTargetedSentimentResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const TextSegmentFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Text && { Text: SENSITIVE_STRING }),
});
export const DetectToxicContentRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TextSegments && { TextSegments: SENSITIVE_STRING }),
});
export const ListDocumentClassifiersResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DocumentClassifierPropertiesList && {
        DocumentClassifierPropertiesList: obj.DocumentClassifierPropertiesList.map((item) => DocumentClassifierPropertiesFilterSensitiveLog(item)),
    }),
});
export const ListEntityRecognizersResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EntityRecognizerPropertiesList && {
        EntityRecognizerPropertiesList: obj.EntityRecognizerPropertiesList.map((item) => EntityRecognizerPropertiesFilterSensitiveLog(item)),
    }),
});
