import { Command as $Command } from "@smithy/smithy-client";
import { MetadataBearer as __MetadataBearer } from "@smithy/types";
import { ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../ComprehendClient";
import { DetectDominantLanguageRequest, DetectDominantLanguageResponse } from "../models/models_0";
/**
 * @public
 */
export type { __MetadataBearer };
export { $Command };
/**
 * @public
 *
 * The input for {@link DetectDominantLanguageCommand}.
 */
export interface DetectDominantLanguageCommandInput extends DetectDominantLanguageRequest {
}
/**
 * @public
 *
 * The output of {@link DetectDominantLanguageCommand}.
 */
export interface DetectDominantLanguageCommandOutput extends DetectDominantLanguageResponse, __MetadataBearer {
}
declare const DetectDominantLanguageCommand_base: {
    new (input: DetectDominantLanguageCommandInput): import("@smithy/smithy-client").CommandImpl<DetectDominantLanguageCommandInput, DetectDominantLanguageCommandOutput, ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    new (input: DetectDominantLanguageCommandInput): import("@smithy/smithy-client").CommandImpl<DetectDominantLanguageCommandInput, DetectDominantLanguageCommandOutput, ComprehendClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    getEndpointParameterInstructions(): import("@smithy/middleware-endpoint").EndpointParameterInstructions;
};
/**
 * <p>Determines the dominant language of the input text. For a list of languages that Amazon
 *       Comprehend can detect, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html">Amazon Comprehend Supported Languages</a>. </p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { ComprehendClient, DetectDominantLanguageCommand } from "@aws-sdk/client-comprehend"; // ES Modules import
 * // const { ComprehendClient, DetectDominantLanguageCommand } = require("@aws-sdk/client-comprehend"); // CommonJS import
 * const client = new ComprehendClient(config);
 * const input = { // DetectDominantLanguageRequest
 *   Text: "STRING_VALUE", // required
 * };
 * const command = new DetectDominantLanguageCommand(input);
 * const response = await client.send(command);
 * // { // DetectDominantLanguageResponse
 * //   Languages: [ // ListOfDominantLanguages
 * //     { // DominantLanguage
 * //       LanguageCode: "STRING_VALUE",
 * //       Score: Number("float"),
 * //     },
 * //   ],
 * // };
 *
 * ```
 *
 * @param DetectDominantLanguageCommandInput - {@link DetectDominantLanguageCommandInput}
 * @returns {@link DetectDominantLanguageCommandOutput}
 * @see {@link DetectDominantLanguageCommandInput} for command's `input` shape.
 * @see {@link DetectDominantLanguageCommandOutput} for command's `response` shape.
 * @see {@link ComprehendClientResolvedConfig | config} for ComprehendClient's `config` shape.
 *
 * @throws {@link InternalServerException} (server fault)
 *  <p>An internal server error occurred. Retry your request.</p>
 *
 * @throws {@link InvalidRequestException} (client fault)
 *  <p>The request is invalid.</p>
 *
 * @throws {@link TextSizeLimitExceededException} (client fault)
 *  <p>The size of the input text exceeds the limit. Use a smaller document.</p>
 *
 * @throws {@link ComprehendServiceException}
 * <p>Base exception class for all service exceptions from Comprehend service.</p>
 *
 *
 * @public
 */
export declare class DetectDominantLanguageCommand extends DetectDominantLanguageCommand_base {
    /** @internal type navigation helper, not in runtime. */
    protected static __types: {
        api: {
            input: DetectDominantLanguageRequest;
            output: DetectDominantLanguageResponse;
        };
        sdk: {
            input: DetectDominantLanguageCommandInput;
            output: DetectDominantLanguageCommandOutput;
        };
    };
}
